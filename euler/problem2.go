// https://projecteuler.net/problem=2
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

package euler

import "math"

func round(x float64) uint64 {
    return uint64(math.Floor(x + 0.5))
}

// find the nth fibonacci number based on Binet's formula
// see here: https://en.wikipedia.org/wiki/Fibonacci_number#Closed-form_expression
// the psi elelemnt could be ignored for n > 1
func fibonacci(n uint) uint64 {
	if (n < 2) {
		return uint64(n);
	}
    float_n := float64(n)
    return round((math.Pow(math.Phi, float_n))/sqrt_5)
}

var sqrt_5 = math.Sqrt(5.0)
var log_sqrt_5 = math.Log(sqrt_5);
var log_phi = math.Log(math.Phi);

// find the largets fibonacci number smaller than n (based on approximation)
// see here: https://en.wikipedia.org/wiki/Fibonacci_number#Computation_by_rounding
func find_nearest_fibonacci_index(n uint64) uint {
    if n < 2 {
        return uint(n)
    }
    float_n := float64(n)
    return uint(math.Floor(math.Log(float_n*sqrt_5 + 0.5)/log_phi))
}

func Problem2() uint64 {
    index_before_4M := find_nearest_fibonacci_index(4000000)
    // Sum of fibonacci series up to the nth element is:
    // S(n) = Fibonacci(n+2) -1
    // Sum of even values elements equals the sum of all elements divided by 2:
    return (fibonacci(index_before_4M + 2) - 1)/2
}

